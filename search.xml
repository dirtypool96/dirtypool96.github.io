<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Java程序基本概念]]></title>
      <url>%2F2017%2F09%2F18%2FJava%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
      <content type="text"><![CDATA[Java第二课由于重学的原因，各种环境配置省略。 数据类型划分以及其操作基本数据类型：数值型：表示整数或小数 整型：byte、short、int、long 默认值为：0 浮点型：float、double 默认值：0.0 平时浮点型用double就行 long用来表示日期时间、内存或文件大小（字节） 如果需要进行编码转换或者二进制数据传输使用byte（-128～127） 字符型：char 默认值：\u0000 布尔型：boolean 默认值：false 引用数据类型： 数组、类、接口 默认值：null 数据的转换不同数据类型需要进行转换： 1234567891011byte a = 3;a = (byte)(a + 2);//需要进行强制转换//float 和 int 运算结果为 float （都为48位）System.out.println('a'+1) ;//结果为 98 //因为97 对应 字母aSystem.out.println((char)('a'+1)) ;//结果为b//65 对应 大写的A 操作符算数运算符123int x = 4270;x = x /1000 * 1000;//结果为4000 12System.out.println(-1%5);//结果为左边（只要比右边小 两个中有负数也是左边） 12345int a =3,b;b = a++;//先赋值再自增 如果++a先加再赋值(--原理相同)System.out.println(b);System.out.println(a);//结果为3 4 转义字符 通过 \ 来转变后面字母或者符号的含义。 \n:换行。 \b:退格。相当于backspace。 \r:按下回车键。window系统，回车符是由两个字符来表示\r\n. \t:制表符。相当于tab键。 在字符串中加上双引号 则(“\”hello\””) (“\hello\“)结果为 \hello\ 逻辑运算符&amp; : 只要两边的boolean表达式结果，有一个为false。那么结果就是false。 只有两边都为true，结果为true。 &amp;:无论左边是true是false。右边都运算。 &amp;&amp;:当左边为false时，右边不运算。 | : 两边只要有一个为true，结果为true。 只有两边都有false，结果为false。 |：两边都参与运算。 ||：当左边为true。右边不运算。 ^ : 两边相同结果是false。 两边不同结果是true。 位运算 左移：3&lt; 3*(2的2次方）= 12 右移：6&gt;&gt;2 –&gt; 6/(2的2次方）= 1 “&gt;&gt;”位移需要看最高位的数 是什么补什么 “&gt;&gt;&gt;”无论最高位是什么 右移后都用0补 与-或-异或：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java的主要特点]]></title>
      <url>%2F2017%2F09%2F18%2FJava%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9%2F</url>
      <content type="text"><![CDATA[Java第一课 Java运行机制 Java是编译型和解释型的语言 Java的源文件 .java 编译过后，形成.class的字节码文件，而后在Java虚拟机（JVM）去解释。 Java是两种语言的结合 编译命令：javac.exe 解释命令：java.exe 最核心的部分就是JVM，依靠JVM实现平台的移植。 特点 Java具备可移植性 Java开发足够简单 Java支持多线程编程 Java支持自动垃圾收集处理 Java是一门面向对象编程语言]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring中的依赖注入简介]]></title>
      <url>%2F2017%2F03%2F27%2FSpring%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%AE%80%E4%BB%8B%2F</url>
      <content type="text"><![CDATA[写在前面的话 Spring对我太重要了，做个关于web相关的项目都要使用Spring，每次去看Spring相关的知识，总是感觉一知半解，没有很好的系统去学习一下，现在抽点时间学习一下Spring。不知道为什么对Spring有一种莫名的喜欢感，也许是因为他的名字，有一种希望的感觉。 Spring学习过程中的总结和心得，本文介绍了在初次学习Spring的时候，对于依赖注入的理解，希望有时间可以进行更深入的学习。请选择性阅读。 Spring介绍 Spring Framework 是一个开源的Java／Java EE全功能栈（full-stack）的应用程序框架，以Apache许可证形式发布，也有.NET平台上的移植版本。该框架基于 Expert One-on-One Java EE Design and Development（ISBN 0-7645-4385-7）一书中的代码，最初由 Rod Johnson 和 Juergen Hoeller等开发。Spring Framework 提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。 控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 依赖注入在学习Spring的时候，总是会遇到这个名词，就是依赖注入，所以首先学习什么是依赖注入。通过几个例子，说明什么是依赖注入，什么是spring下的依赖注入。 我们举一个Person开car的例子，希望通过这个例子可以更好的学习和理解什么是依赖注入。当然举得例子都是很简单的情形，在实际项目中可能要比这些复杂的多。 一 、第一种情形：紧耦合情形，开宝马。 分析如下： 定义三个类，Person.java、BaoMa.java、MainTest.java。如下面的代码，Person在它的构造函数中创建了Baoma对象，这就让Person类和Baoma类紧密的耦合在了一起，而且现在Person类只能开宝马，如果现在想要开奥迪，Person类是不能够处理的，除非修改Person这个类，这就使得两个类在紧耦合的情况下逻辑变得不够清晰，如果业务逻辑复杂，这些紧耦合的情形就会更多，带来代码难以测试，难以复用，难以理解等很多弊端。再加上让Person类来管理Baoma类的对象创建也是不合理的，因为面向对象的思想来说，Person类是没有管理Baoma类的对象的职责的。 代码如下： Person.java 1234567891011 public class Person &#123; private BaoMa baoma; public Person()&#123; baoma=new BaoMa();//Person和Baoma这个类紧耦合 &#125; public void driver()&#123; baoma.GuaDang(); baoma.CaiYouMen(); baoma.DaFangXiang(); &#125;&#125; BaoMa.java 1234567891011public class BaoMa &#123; public void GuaDang()&#123; System.out.println("我是宝马车，我在进行挂档"); &#125; public void CaiYouMen()&#123; System.out.println("我是宝马车，我在进行踩油门"); &#125; public void DaFangXiang()&#123; System.out.println("我是宝马车，我在进行打方向盘"); &#125;&#125; MainTest.java 1234567public class MainTest &#123; public static void main(String[] args)&#123; Person boy =new Person(); boy.driver(); &#125;&#125; 运行结果： 123我是宝马车，我在进行挂档我是宝马车，我在进行踩油门我是宝马车，我在进行打方向盘]]></content>
    </entry>

    
  
  
</search>
